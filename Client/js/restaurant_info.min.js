let restaurant;var newMap;document.addEventListener('DOMContentLoaded',(event)=>{window.initMap()});window.initMap=()=>{fetchRestaurantFromURL((error,restaurant)=>{if(error){console.error(error)}else{self.newMap=L.map('map',{center:[restaurant.latlng.lat,restaurant.latlng.lng],zoom:16,scrollWheelZoom:false});L.tileLayer('https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.jpg70?access_token={mapboxToken}',{mapboxToken:'pk.eyJ1IjoianVuZWg5MSIsImEiOiJjamoxa3hocXEwdG15M3BtbW9zMnZwemNzIn0.t75fff-0q5Tt-ml4VJ4hdA',maxZoom:18,attribution:'Map data &copy; <a href="https://www.openstreetmap.org/">OpenStreetMap</a> contributors, <a href="https://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery Â© <a href="https://www.mapbox.com/">Mapbox</a>',id:'mapbox.streets'}).addTo(newMap);fillBreadcrumb();DBHelper.mapMarkerForRestaurant(self.restaurant,self.newMap)}})};const fetchRestaurantFromURL=(callback)=>{if(self.restaurant){callback(null,self.restaurant);return}const id=getParameterByName('id');if(!id){error='No restaurant id in URL';callback(error,null)}else{DBHelper.fetchRestaurantById(id,(error,restaurant)=>{self.restaurant=restaurant;if(!restaurant){console.error(error);return}fillRestaurantHTML();callback(null,restaurant)})}};const fillRestaurantHTML=(restaurant=self.restaurant)=>{const div=document.getElementById('maincontent');const isFavorite=(restaurant['is_favorite']&&restaurant['is_favorite'].toString()==='true')?true:false;const favoriteDiv=document.createElement('div');favoriteDiv.className='favorite-icon';const favorite=document.createElement('button');favorite.style.background=isFavorite?`url('/img/icon-fav-1.svg') no-repeat`:`url('img/icon-fav-2.svg') no-repeat`;favorite.innerHTML=isFavorite?restaurant.name+' is a favorite':restaurant.name+' is not a favorite';favorite.id='favorite-icon-'+restaurant.id;favorite.onclick=event=>handleFavoriteClick(restaurant.id,!isFavorite);favoriteDiv.append(favorite);div.append(favoriteDiv);const name=document.getElementById('restaurant-name');name.innerHTML=restaurant.name;const address=document.getElementById('restaurant-address');address.innerHTML=restaurant.address;const image=document.getElementById('restaurant-img');image.className='restaurant-img';image.src=DBHelper.imageUrlForRestaurant(restaurant);image.alt=`Image of ${restaurant.name }`;const cuisine=document.getElementById('restaurant-cuisine');cuisine.innerHTML=restaurant.cuisine_type;if(restaurant.operating_hours){fillRestaurantHoursHTML()}DBHelper.fetchRestaurantReviewsById(restaurant.id,fillReviewsHTML)};const fillRestaurantHoursHTML=(operatingHours=self.restaurant.operating_hours)=>{const hours=document.getElementById('restaurant-hours');for(let key in operatingHours){const row=document.createElement('tr');const day=document.createElement('td');day.innerHTML=key.trim();row.appendChild(day);const time=document.createElement('td');time.innerHTML=operatingHours[key].trim();row.appendChild(time);hours.appendChild(row)}};const fillReviewsHTML=(error,reviews)=>{self.restaurant.reviews=reviews;if(error){console.log('Error retrieving restaurant review: ',error)}const container=document.getElementById('reviews-container');const flex=document.createElement('div');flex.id='reviews-heading';container.appendChild(flex);const title=document.createElement('h3');title.innerHTML='Reviews';flex.appendChild(title);if(!reviews){const noReviews=document.createElement('p');noReviews.innerHTML='No reviews yet!';container.appendChild(noReviews);return}const ul=document.getElementById('reviews-list');reviews.forEach(review=>{ul.appendChild(createReviewHTML(review))});container.appendChild(ul)};const createReviewHTML=(review)=>{const li=document.createElement('li');const name=document.createElement('h4');name.innerHTML=review.name;name.className='restaurant-review-user';li.appendChild(name);const date=document.createElement('p');const created=review.createdAt;date.innerHTML=new Date(created).toLocaleString();li.appendChild(date);const rating=document.createElement('h5');rating.innerHTML=`Rating: ${review.rating }`;li.appendChild(rating);const comments=document.createElement('p');comments.innerHTML=review.comments;li.appendChild(comments);return li};const fillBreadcrumb=(restaurant=self.restaurant)=>{const breadcrumb=document.getElementById('breadcrumb');const li=document.createElement('li');const a=document.createElement('a');a.href=window.location;li.innerHTML=restaurant.name;a.setAttribute('aria-current','page');li.appendChild(a);breadcrumb.appendChild(li)};const getParameterByName=(name,url)=>{if(!url){url=window.location.href}name=name.replace(/[\[\]]/g,'\\$&');const regex=new RegExp(`[?&]${ name }(=([^&#]*)|&|#|$)`),results=regex.exec(url);if(!results){return null}if(!results[2]){return ''}return decodeURIComponent(results[2].replace(/\+/g,' '))};const handleFavoriteClick=(id,newState)=>{const favorite=document.getElementById('favorite-icon-'+id);self.restaurant['is_favorite']=newState;favorite.onclick=event=>handleFavoriteClick(restaurant.id,!self.restaurant['is_favorite']);DBHelper.handleFavoriteClick(id,newState)};const saveReview=()=>{const name=document.getElementById('reviewName').value;const rating=document.getElementById('reviewRating').value-0;const comment=document.getElementById('reviewComment').value;console.log('reviewName: ',name);DBHelper.saveReview(self.restaurant.id,name,rating,comment,(error,review)=>{console.log('got saveReview callback');if(error){console.log('Error saving review')}const btn=document.getElementById('btnSaveReview');btn.onclick=event=>saveReview();window.location.href='/restaurant.html?id='+self.restaurant.id})}